name: Check MDN Translation Sync Lag

on:
  workflow_dispatch: # 手動觸發
  schedule:
    - cron: '0 0 * * 0' # 每週日午夜 (UTC)

permissions:
  contents: write # 允許寫入 README.md

jobs:
  check_lag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mdn/content (Source)
        uses: actions/checkout@v4
        with:
          repository: mdn/content
          path: content

      - name: Checkout mdn/translated-content (Translations)
        uses: actions/checkout@v4
        with:
          repository: mdn/translated-content
          path: translated-content

      - name: Checkout Current Repo (for README update)
        uses: actions/checkout@v4
        with:
          path: current-repo

      - name: Set up Git user
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        working-directory: ./current-repo

      - name: Check Translation Lag and Update README.md
        run: |
          set -e

          CONTENT_DIR="content"
          TRANSLATED_DIR="translated-content"
          ZH_TW_PATH="$TRANSLATED_DIR/files/zh-tw"
          EN_US_PATH="$CONTENT_DIR/files/en-us"
          README_FILE="current-repo/README.md"
          LAG_LOG="lag_report.log"

          echo "Starting check in $ZH_TW_PATH..."
          echo "" > $LAG_LOG

          find "$ZH_TW_PATH" -type f -name '*.md' | while read -r zh_file; do
            echo "Processing $zh_file ..."

            source_commit=$(awk '
              BEGIN { in_l10n = 0; front_matter_ended = 0 }
              /^---$/ {
                if (NR > 1) { front_matter_ended = 1 }
                next
              }
              front_matter_ended { exit }
              /^\s*l10n:\s*$/ { in_l10n = 1; next }
              in_l10n && /^\s+sourceCommit:/ {
                val = $0;
                sub(/^\s+sourceCommit:\s*/, "", val);
                sub(/\s*#.*/, "", val);
                gsub(/^["'\'']|["'\'']$/, "", val);
                sub(/\s*$/, "", val);
                print val;
                exit
              }
              in_l10n && !/^\s+/ { in_l10n = 0 }
            ' "$zh_file")

            if [[ -z "$source_commit" ]]; then
              echo "  -> 'l10n.sourceCommit' key not found or invalid. Skipping."
              continue
            fi

            if [[ ${#source_commit} -lt 7 ]]; then
              echo "  -> Invalid sourceCommit format: [$source_commit]. Skipping."
              continue
            fi
            echo "  -> Found sourceCommit: $source_commit"

            relative_path_zh=${zh_file#"$ZH_TW_PATH/"}
            relative_path_en="files/en-us/$relative_path_zh"

            en_us_file="$EN_US_PATH/$relative_path_zh"
            if [[ ! -f "$en_us_file" ]]; then
              echo "  -> Corresponding en-us file not found. Skipping."
              continue
            fi

            pushd "$CONTENT_DIR" > /dev/null
            if ! git ls-files --error-unmatch "$relative_path_en" > /dev/null 2>&1; then
              echo "  -> File not tracked by git. Skipping."
              popd > /dev/null
              continue
            fi

            latest_en_commit=$(git log -1 --pretty=format:%H -- "$relative_path_en" || echo "")
            popd > /dev/null

            if [[ -z "$latest_en_commit" ]]; then
              echo "  -> Could not get latest commit. Skipping."
              continue
            fi
            echo "  -> Latest commit: $latest_en_commit"

            pushd "$CONTENT_DIR" > /dev/null
            commit_diff_count=0
            if [[ "$source_commit" != "$latest_en_commit" ]]; then
              is_ancestor=$(git merge-base --is-ancestor "$source_commit" "$latest_en_commit")
              ancestor_exit_code=$?

              set +e
              commit_diff_count=$(git rev-list --count "${source_commit}..${latest_en_commit}" -- "$relative_path_en" 2>/dev/null)
              rev_list_exit_code=$?
              set -e

              if [[ $rev_list_exit_code -ne 0 || $ancestor_exit_code -ne 0 ]]; then
                commit_diff_count=-1
                echo "  -> Warning: Cannot calculate diff count."
              elif [[ $commit_diff_count -eq 0 && "$source_commit" != "$latest_en_commit" ]]; then
                commit_diff_count=-1
                echo "  -> Warning: Diff count is 0 but SHAs differ."
              fi
            fi
            popd > /dev/null

            echo "  -> Commit difference count: $commit_diff_count"

            if [[ "$commit_diff_count" -ne 0 ]]; then
              lag_status="落後 $commit_diff_count commits"
              if [[ "$commit_diff_count" -eq -1 ]]; then
                lag_status="不同步 (SHA 無效、歷史變更或非祖先關係)"
              fi
              relative_path_log=$(echo "$relative_path_zh" | sed 's/`/\\`/g')
              echo "* \`$relative_path_log\`: $lag_status (翻譯基於: \`$source_commit\`, 英文最新: \`$latest_en_commit\`)" >> $LAG_LOG
            fi
          done

          if [[ -s "$LAG_LOG" ]]; then
            echo "::set-output name=has_lag::true"
            echo "Found translation lag. Updating README..."

            echo -e "# 翻譯同步狀態報告\n\n以下是目前 zh-tw 翻譯落後的文件列表（每週自動更新）：" > "$README_FILE"
            echo "" >> "$README_FILE"
            cat "$LAG_LOG" >> "$README_FILE"

            pushd current-repo > /dev/null
            git add README.md
            git commit -m "docs: 每週自動更新翻譯同步狀態"
            git push
            popd > /dev/null
          else
            echo "::set-output name=has_lag::false"
            echo "No translation lag found."
          fi